#!/bin/bash

set -e # exit immediately if a simple command exits with a non-zero status

container_name=$2

# Setup common env vars and folders
source /var/vcap/packages/bosh-helpers/ctl_setup.sh 'containers' "${container_name}"
export CONTAINER_PID_FILE=${CONTAINERS_PID_DIR}/${container_name}.pid

case $1 in

  start)
    pid_guard ${CONTAINER_PID_FILE} ${JOB_NAME}
    echo $$ > ${CONTAINER_PID_FILE}

    # Stop and remove previously Docker Container if exists
    ${DOCKER_COMMAND} stop ${container_name} || true
    ${DOCKER_COMMAND} rm ${container_name} || true

    # Create Container persistent disk path
    if [ ! -d ${CONTAINERS_STORE_DIR}/${container_name} ]; then
      mkdir -p ${CONTAINERS_STORE_DIR}/${container_name}
      chmod 777 ${CONTAINERS_STORE_DIR}/${container_name}
     fi



    sed -i 's/server.primary.mongo.host.ip=127.0.0.1/server.primary.mongo.host.ip=192.168.125.116/g' /tmp/3.2.5/common.server.properties
    sed -i 's/server.remote.sitespecific.mongo.host.ip=127.0.0.1/server.remote.sitespecific.mongo.host.ip=192.168.125.116/g' /tmp/3.2.5/common.server.properties
    sed -i 's/server.sitespecific.mongo.host.ip=127.0.0.1/server.sitespecific.mongo.host.ip=192.168.125.116/g' /tmp/3.2.5/common.server.properties



    sed -i 's/kafkaproducer.bootstrap.servers=127.0.0.1:9092,127.0.0.1:9093,127.0.0.1:9094/kafkaproducer.bootstrap.servers=192.168.119.125:9092,192.168.119.125:9093,192.168.119.125:9094/g' /tmp/3.2.5/common.server.properties
    sed -i 's/kafkaconsumer.bootstrap.servers=127.0.0.1:9092,127.0.0.1:9093,127.0.0.1:9094/kafkaconsumer.bootstrap.servers=192.168.119.125:9092,192.168.119.125:9093,192.168.119.125:9094/g' /tmp/3.2.5/common.server.properties


    sed -i 's/server.archive.es.host.ip=127.0.0.1/server.archive.es.host.ip=192.168.125.110/g' /tmp/3.2.5/common.server.properties
    sed -i 's/es.settings.archive.cluster.name=elasticsearch/es.settings.archive.cluster.name=vagrant-es-cluster/g' /tmp/3.2.5/common.server.properties
    sed -i 's/server.metrics.es.host.ip=127.0.0.1/server.metrics.es.host.ip=192.168.125.110/g' /tmp/3.2.5/common.server.properties
    sed -i 's/es.settings.metrics.cluster.name=elasticsearch/es.settings.metrics.cluster.name==vagrant-es-cluster/g' /tmp/3.2.5/common.server.properties
    sed -i 's/server.primary.object.store.identity=sysops:swift/server.primary.object.store.identity=sdet:swift/g' /tmp/3.2.5/common.server.properties
    sed -i 's/server.primary.object.store.credential=UIJCcL25biI8ScfR8jnrWOvrFheEoYgGxXWOQlgj/server.primary.object.store.credential=lwOO4OnBu72arTjOjMiO6N1wOkfFNZ4PwNRaVzGh/g' /tmp/3.2.5/common.server.properties
    sed -i 's/192.168.126.10/192.168.125.121/g' /tmp/3.2.5/common.server.properties
     
    # Build the Docker image from Dockerfile
    if [ -a "${CONTAINERS_CONF_DIR}/${container_name}/Dockerfile" ]; then
	cp /var/vcap/packages/docker/alcatraz_cache_build/* ${CONTAINERS_CONF_DIR}/${container_name}/
        chmod 777 ${CONTAINERS_CONF_DIR}/${container_name}/*
    	#Loading alcatraz properties into the zookeeper instance
	zkaddr=`grep "zookeeper.host" ${CONTAINERS_CONF_DIR}/${container_name}/zookeeper.cfg | cut -d "=" -f2 | cut -d "," -f1`
	hzaddr=`grep "hazel.host" ${CONTAINERS_CONF_DIR}/${container_name}/hazel.cfg | cut -d "=" -f2`

	zkfulladdress=`grep "zookeeper.host" ${CONTAINERS_CONF_DIR}/${container_name}/zookeeper.cfg | cut -d "=" -f2`

        sed -i 's/export.monitor.zkservers=127.0.0.1:2181/export.monitor.zkservers='$zkfulladdress'/g' /tmp/3.2.5/common.server.properties
	sed -i 's/zkservers=127.0.0.1:2181/zkservers='$zkfulladdress'/g' /tmp/3.2.5/common.server.properties

	echo "hazel address "$hzaddr >> ${LOG_DIR}/alcatraz.log

	sed -i 's/alcatraz.hazelcast.hosts=127.0.0.1/alcatraz.hazelcast.hosts='$hzaddr'/g' /tmp/3.2.5/common.server.properties

	cp /tmp/alcatraz_config/build_version.info ${CONTAINERS_CONF_DIR}/${container_name}/

	build_version=`cat ${CONTAINERS_CONF_DIR}/${container_name}/build_version.info`

	echo "product.version="$build_version >> ${CONTAINERS_CONF_DIR}/${container_name}/product-build.info

	zkhost=`echo $zkaddr | cut -d ":" -f1`
	zkport=`echo $zkaddr | cut -d ":" -f2`
	echo $zkhost >> ${CONTAINERS_CONF_DIR}/${container_name}/hostfile
	echo $zkport >> ${CONTAINERS_CONF_DIR}/${container_name}/portfile
	

        sudo chmod 777 /tmp/alcatraz_config/*
	cd /tmp/alcatraz_config

	echo "waiting for zookeeper starts..........." >> ${LOG_DIR}/alcatraz.log
	count=0
	val=""
	while [  -z "$val"  ];do
	val=`echo mntr | nc $zkhost $zkport|grep "zk_version"`
	sleep 5
	echo "sleeping ..... till connection...$count seconds " >> ${LOG_DIR}/alcatraz.log
	count=$((count+5))
	done

	echo "Loading alcatraz  properties into zookeeper host $zkaddr ....................." >> ${LOG_DIR}/alcatraz.log
	/bin/bash deploy_new_properties.sh $zkaddr >> ${LOG_DIR}/alcatraz.log

	cd /etc/sv/monit
	
        image=$(${DOCKER_COMMAND} images | grep "$(eval echo "\$${container_name}_image")") || true

        if [ -z "${image}" ]; then
            ${DOCKER_COMMAND} \
                build -t "$(eval echo "\$${container_name}_image")" ${CONTAINERS_CONF_DIR}/${container_name} \
                >>${LOG_DIR}/${OUTPUT_LABEL}.stdout.log \
                2>>${LOG_DIR}/${OUTPUT_LABEL}.stderr.log
        fi
    else 
	echo "nothing found at ${CONTAINERS_CONF_DIR}/${container_name}/Dockerfile path" >>${LOG_DIR}/alcatraz.log    	
    fi

    # Start Docker container
    docker_options="run -p 5701:5701 --network host --detach \
      --name ${container_name} \
      "$(eval echo "\$${container_name}_blkio_weight")" \
      "$(eval echo "\$${container_name}_cap_adds")" \
      "$(eval echo "\$${container_name}_cap_drops")" \
      "$(eval echo "\$${container_name}_cpu_period")" \
      "$(eval echo "\$${container_name}_cpu_quota")" \
      "$(eval echo "\$${container_name}_cpu_shares")" \
      "$(eval echo "\$${container_name}_devices")" \
      "$(eval echo "\$${container_name}_disable_content_trust")" \
      "$(eval echo "\$${container_name}_dns")" \
      "$(eval echo "\$${container_name}_dns_options")" \
      "$(eval echo "\$${container_name}_dns_search")" \
      "$(eval echo "\$${container_name}_entrypoint")" \
      "$(eval echo "\$${container_name}_env_file")" \
      "$(eval echo "\$${container_name}_env")" \
      "$(eval echo "\$${container_name}_expose")" \
      "$(eval echo "\$${container_name}_group_adds")" \
      "$(eval echo "\$${container_name}_hostname")" \
      "$(eval echo "\$${container_name}_kernel_memory")" \
      "$(eval echo "\$${container_name}_labels")" \
      "$(eval echo "\$${container_name}_links")" \
      "$(eval echo "\$${container_name}_log_driver")" \
      "$(eval echo "\$${container_name}_log_options")" \
      "$(eval echo "\$${container_name}_lxc_options")" \
      "$(eval echo "\$${container_name}_mac_address")" \
      "$(eval echo "\$${container_name}_memory")" \
      "$(eval echo "\$${container_name}_memory_reservation")" \
      "$(eval echo "\$${container_name}_memory_swap")" \
      "$(eval echo "\$${container_name}_memory_swappiness")" \
      "$(eval echo "\$${container_name}_net")" \
      "$(eval echo "\$${container_name}_oom_kill_disable")" \
      "$(eval echo "\$${container_name}_privileged")" \
      "$(eval echo "\$${container_name}_publish")" \
      "$(eval echo "\$${container_name}_read_only")" \
      "$(eval echo "\$${container_name}_restart")" \
      "$(eval echo "\$${container_name}_security_options")" \
      "$(eval echo "\$${container_name}_stop_signal")" \
      "$(eval echo "\$${container_name}_ulimits")" \
      "$(eval echo "\$${container_name}_user")" \
      "$(eval echo "\$${container_name}_volumes")" \
      "$(eval echo "\$${container_name}_bind_volumes")" \
      "$(eval echo "\$${container_name}_volumes_from")" \
      "$(eval echo "\$${container_name}_volume_driver")" \
      "$(eval echo "\$${container_name}_workdir")" \
      "$(eval echo "\$${container_name}_image")" \
      "$(eval echo "\$${container_name}_command")" \
    "
    echo "$(date) Running Docker command with options: ${docker_options}"
    ${DOCKER_COMMAND}  ${docker_options} \
        >>${LOG_DIR}/${OUTPUT_LABEL}.stdout.log \
        2>>${LOG_DIR}/${OUTPUT_LABEL}.stderr.log

    # Grab Container process pid
    pid_process=$(${DOCKER_COMMAND} inspect -f '{{ .State.Pid }}' ${container_name})
    echo $pid_process > ${CONTAINER_PID_FILE}
    ;;

  stop)
    # Stop and remove Docker Container
    ${DOCKER_COMMAND} stop ${container_name} || true
    ${DOCKER_COMMAND} rm ${container_name} || true
    ;;

  *)
    echo "Usage: $0 {start|stop}"
    exit 1
    ;;

esac
exit 0
